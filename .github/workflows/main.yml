name: CI

on: [push]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        name: [
          Ubuntu 16 GCC 4.8,
          Ubuntu 16 GCC,
          Ubuntu 16 Clang 3.5,
          Ubuntu 16 Clang,
          Ubuntu 18 GCC,
          Ubuntu 18 Clang,
          Ubuntu 18 Clang No Zlib,
          Ubuntu 18 Clang No Bzip2,
          Ubuntu 18 Clang No LZMA,
          Ubuntu 18 Clang No Pkcrypt,
          Ubuntu 18 Clang No Winzip AES,
          Ubuntu 18 Clang No Encryption,
          Ubuntu 18 Clang Compress Only,
          Ubuntu 18 Clang Decompress Only,
          Ubuntu 18 Clang OpenSSL,
          Windows 2016 MSVC,
          Windows 2016 GCC,
          Windows 2019 MSVC,
          Windows 2019 GCC,
          macOS 10.14 Xcode 9.4.1,
          macOS 10.14 Xcode,
          macOS 10.14 Xcode LibCompression,
          macOS 10.14 Xcode OpenSSL
        ]

        include:
          - name: Ubuntu 16 GCC 4.8
            os: ubuntu-16.04
            compiler: gcc
            cmake-args: -DMZ_CODE_COVERAGE=ON
            version: "4.8"
            codecov: ubuntu_16_gcc_48

          - name: Ubuntu 16 GCC
            os: ubuntu-16.04
            compiler: gcc
            cmake-args: -DMZ_CODE_COVERAGE=ON
            codecov: ubuntu_16_gcc

          - name: Ubuntu 16 Clang 3.5
            os: ubuntu-16.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON
            codecov: ubuntu_16_clang_35
            version: "3.5"
            packages: llvm-3.5
            gcov-exec: llvm-cov-3.5 gcov

          # No code coverage on release builds
          - name: Ubuntu 16 Clang
            os: ubuntu-16.04
            compiler: clang
            deploy: true
            deploy-name: linux

          - name: Ubuntu 18 GCC
            os: ubuntu-18.04
            compiler: gcc
            cmake-args: -DMZ_CODE_COVERAGE=ON
            codecov: ubuntu_18_gcc

          - name: Ubuntu 18 Clang
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON
            codecov: ubuntu_18_clang
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No Zlib
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_ZLIB=OFF
            codecov: ubuntu_18_clang_no_zlib
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No Bzip2
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_BZIP=OFF
            codecov: ubuntu_18_clang_no_bzip2
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No LZMA
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_LZMA=OFF
            codecov: ubuntu_18_clang_no_lzma
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No Pkcrypt
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_PKCRYPT=OFF
            codecov: ubuntu_18_clang_no_pkcrypt
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No Winzip AES
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_WZAES=OFF
            codecov: ubuntu_18_clang_no_winzip_aes
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang No Encryption
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_PKCRYPT=OFF -DMZ_WZAES=OFF
            codecov: ubuntu_18_clang_no_encryption
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang Compress Only
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_COMPRESS_ONLY=ON
            codecov: ubuntu_18_clang_compress_only
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang Decompress Only
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_DECOMPRESS_ONLY=ON
            codecov: ubuntu_18_clang_decompress_only
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          - name: Ubuntu 18 Clang OpenSSL
            os: ubuntu-18.04
            compiler: clang
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_OPENSSL=ON
            codecov: ubuntu_18_clang_openssl
            packages: llvm-6.0
            gcov-exec: llvm-cov-6.0 gcov

          # No code coverage supported
          - name: Windows 2016 MSVC
            os: windows-2016
            compiler: cl
            deploy: true
            deploy-name: windows

          - name: Windows 2016 GCC
            os: windows-2016
            compiler: gcc
            cmake-args: -DMZ_CODE_COVERAGE=ON -G Ninja
            codecov: windows_2016_gcc

          # No code coverage supported
          - name: Windows 2019 MSVC
            os: windows-2019
            compiler: cl

          - name: Windows 2019 GCC
            os: windows-2019
            compiler: gcc
            cmake-args: -DMZ_CODE_COVERAGE=ON -G Ninja
            codecov: windows_2019_gcc

          # No code coverage on release builds
          - name: macOS 10.14 Xcode 9.4.1
            os: macOS-10.14
            version: "9.4.1"
            deploy: true
            deploy-name: macos

          - name: macOS 10.14 Xcode
            os: macOS-10.14
            cmake-args: -DMZ_CODE_COVERAGE=ON
            codecov: macos_1014_xcode

          - name: macOS 10.14 Xcode LibCompression
            os: macOS-10.14
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_LIBCOMP=ON
            codecov: macos_1014_xcode_libcompression

          - name: macOS 10.14 Xcode OpenSSL
            os: macOS-10.14
            cmake-args: -DMZ_CODE_COVERAGE=ON -DMZ_OPENSSL=ON -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DOPENSSL_INCLUDE_DIRS=/usr/local/opt/openssl/include -DOPENSSL_CRYPTO_LIBRARY=/usr/local/opt/openssl/lib/libcrypto.dylib -DOPENSSL_SSL_LIBRARY=/usr/local/opt/openssl/lib/libssl.dylib
            codecov: macos_1014_xcode_openssl

    steps:
    - uses: actions/checkout@v1

    - name: Install packages (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pkgconfig ${{ matrix.packages }}

    - name: Install packages (Ubuntu)
      if: runner.os == 'Linux' && matrix.packages
      run: |
        sudo apt-get update
        sudo apt-get install ${{ matrix.packages }}

    - name: Install packages (Windows)
      if: runner.os == 'Windows' && matrix.codecov
      run: |
        choco install ninja

    - name: Install packages (Windows/GCC)
      if: runner.os == 'Windows' && matrix.codecov && matrix.compiler == 'gcc'
      # Use gcov-7 via mingw on windows because gcov-8 throws tons of warnings
      # https://partner-bugzilla.redhat.com/show_bug.cgi?id=1577508
      run: |
        choco install mingw --version=7.3.0 --force --allow-downgrade

    - name: Install codecov.io tools
      if: matrix.codecov
      # Need to use special fork of codecov-python for Windows
      # https://github.com/codecov/codecov-python/pull/169
      run: |
        python -u -m pip -v install git+https://github.com/nmoinvaz/codecov-python.git@master

    - name: Generate project files
      run: |
        mkdir ${{ matrix.build-dir || '.not-used' }}
        cd ${{ matrix.build-dir || '.' }}
        cmake ${{ matrix.build-src-dir || '.' }} -DMZ_BUILD_TEST=ON -DMZ_BUILD_UNIT_TEST=ON -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake-args }}
      env:
        CC: ${{ matrix.compiler }}
        CFLAGS: ${{ matrix.cflags }}
        LDFLAGS: ${{ matrix.ldflags }}

    - name: Compile source code
      run: |
        cd ${{ matrix.build-src-dir || '.' }}
        cmake --build . --config ${{ matrix.build-config || 'Release' }}

    - name: Install test certificate (macOS)
      if: runner.os == 'macOS'
      run: |
        sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain test/test.pem || true

    - name: Install test certificate (Windows)
      if: runner.os == 'Windows'
      run: |
        certutil -addstore -enterprise Root test/test.pem

    - name: Run test cases
      run: |
        cd ${{ matrix.build-src-dir || '.' }}
        ctest --output-on-failure -C ${{ matrix.build-config || 'Release' }}
      # Specify test certificate for OpenSSL tests
      env:
        SSL_CERT_FILE: test.pem

    - name: Upload coverage report
      if: matrix.codecov
      run: |
        cd ${{ matrix.build-src-dir || '.' }}
        python -m codecov -F "${{ matrix.codecov }}" --name "${{ matrix.name }}" --gcov-exec="${{ matrix.gcov-exec || 'gcov' }}"
      env:
        # Codecov integration does not yet support GitHub Actions
        CODECOV_TOKEN: "${{secrets.CODECOV_TOKEN}}"

    - name: Package release (Ubuntu/macOS)
      if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.deploy && startsWith(github.ref, 'refs/tags/')
      run: |
        cd ${{ matrix.build-dir || '.' }}
        ls *mini*zip* | tar -czvf minizip-${{ matrix.deploy-name }}.tar.gz -T -

    - name: Upload release (Ubuntu/macOS)
      uses: svenstaro/upload-release-action@v1-release
      if: (runner.os == 'Linux' || runner.os == 'macOS') && matrix.deploy && startsWith(github.ref, 'refs/tags/')
      with:
        asset_name: minizip-${{ matrix.deploy-name }}.tar.gz
        file: ${{ matrix.build-dir || '.' }}/minizip-${{ matrix.deploy-name }}.tar.gz
        tag: ${{ github.ref }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: true

    - name: Package release (Windows)
      if: runner.os == 'Windows' && matrix.deploy && startsWith(github.ref, 'refs/tags/')
      run: |
        cd ${{ matrix.build-dir || '.' }}/${{ matrix.build-config || 'Release' }}
        7z a -tzip minizip-${{ matrix.deploy-name }}.zip *mini*zip*

    - name: Upload release (Windows)
      uses: svenstaro/upload-release-action@v1-release
      if: runner.os == 'Windows' && matrix.deploy && startsWith(github.ref, 'refs/tags/')
      with:
        asset_name: minizip-${{ matrix.deploy-name }}.zip
        file: ${{ matrix.build-dir || '.' }}/${{ matrix.build-config || 'Release' }}/minizip-${{ matrix.deploy-name }}.zip
        tag: ${{ github.ref }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: true

    - name: Podspec (macOS)
      if: runner.os == 'macOS'
      run: |
        rm CMakeCache.txt
        cd ${{ matrix.build-dir || '.' }}
        cmake -G Xcode ${{ matrix.build-src-dir || '.' }}
        echo "target 'minizip' do pod 'Minizip', :path => '${{ matrix.build-src-dir || '.' }}'; platform :osx; end" > Podfile
        pod install
